The print command has ()s after it like so print()
It can print letters numbers and variables
# is the comment character
-----------------------------------------------------------------------------------------------------------------------------------------
For some odd reason the print("string", 1 + 2) fails I do not understand why
Its because you were using python 2.0 derp to avoid this use python3.6 ex2.py
-----------------------------------------------------------------------------------------------------------------------------------------
PEMDAS isnt as simple as the acronym suggests its actually better represented
as PE (M&D) (A&S) so Parenthesis, exponents THEN Multiplication and division
happen at the same time andaddition and subtraction happen at the same time
after that.
-----------------------------------------------------------------------------------------------------------------------------------------
Variables are easily declared in python just variable name = something
-----------------------------------------------------------------------------------------------------------------------------------------
f is a formatting character and is used to reference variables inside strings
for example print(f"My age is {my_age}.") pretty simple but keep in mind that in
a print statement the f goes INSIDE the Parenthesis but outside the quotations
-----------------------------------------------------------------------------------------------------------------------------------------
You can use f in variables like so: var1 = f"Its the same {var}" REMEMBER that
-----------------------------------------------------------------------------------------------------------------------------------------
You can also use stat a string with a {} in a variable and then you can change
it later. For example x = "No f yet but we will leave some {} here"
print(x.format(brackets))
You only need one variable and the print function. I assume there are other ways
to do this without the print function though. Its very interesting REMEMBER THIS
-----------------------------------------------------------------------------------------------------------------------------------------
You can use the + to concatenate strings and variables as well
-----------------------------------------------------------------------------------------------------------------------------------------
# the .format('snow')) can be used to change the values within the curly brackets
#but if there are multiple brackets how do you differentiate them from each other??
I havent tested this yet so TEST IT but it probably goes first come first serve
like so:
print(x.format(first, second, third))
#The reason this is important is that it can be used in loops or other situations
 where a string is already defined apparently
-----------------------------------------------------------------------------------------------------------------------------------------
f is the same as .format(). For example
print("Its fleece was white as {}.".format('snow'))
The above code is the same as:
print(f"Its fleece was white as {snow}")
-----------------------------------------------------------------------------------------------------------------------------------------
print("a" * 10) This will print the character a 10 times interesting that you can
do math on strings.
-----------------------------------------------------------------------------------------------------------------------------------------
,end="" allows you to print on the same line. If you use: + " " it will perform
a line break which may not be the desired result.
So Remember , end=" " means no line break where + will add a line break
-----------------------------------------------------------------------------------------------------------------------------------------
\ is the escape character good for escaping out of quotes and getting around
special characters
-----------------------------------------------------------------------------------------------------------------------------------------
"""This is a multi line string
As long as it starts and ends with
 \"\"\" characters. It will continue
forever"""
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR: I used a /n instead of a \n DONT DO THAT!
-----------------------------------------------------------------------------------------------------------------------------------------
There are a good amount of escape character combinatations \t tabs
\n as mentioned goes to a new line
\r does a carriage return which is like a new line except in some situations
its a little different
\ combined with a special char will exclude a special characters like ' or "
There are also \ combinations that allow different formatting
-----------------------------------------------------------------------------------------------------------------------------------------

 end=' ' What is it again?
            First: its used only with the print command
            Second: The print command will always go to a new line
            But if you dont want the output to go on a NEW line but the SAME line
            should use end = ' '
            This tells Python to end the string with a space instead
            Thats really all there is to it.
REMEMBER^
-----------------------------------------------------------------------------------------------------------------------------------------
REMEMBER: User input is easy just assign a variable like so:
usrinput = input()
To make this easier lets put the prompt as a question to save us a print() cmd
whatisyourage = input("Enter your age.")
-----------------------------------------------------------------------------------------------------------------------------------------
You can put the prompt inside the input like so: var = input("Enter your name!")
-----------------------------------------------------------------------------------------------------------------------------------------
pydoc! its like the man pages for commands,keywords and anything in python!
REMEMBER IT
-----------------------------------------------------------------------------------------------------------------------------------------
pydoc file will open a file and write or append to it!
-----------------------------------------------------------------------------------------------------------------------------------------
pydoc sys This will allow you to change path names, stdin and stuff like that?
IDK what I DO know is that sys will allow you to import more code that is built
in to python.
-----------------------------------------------------------------------------------------------------------------------------------------
pydoc os

-----------------------------------------------------------------------------------------------------------------------------------------
Argv - you import this MODULE with sys like so from sys argv you can then assign it
arguments that you will have to provide it to run the python script. So when
typing in the command python3.6 you need to specify what the script for one then
the following variables that will be sent to argv. When the script is ran it
unpacks argv and will send your code those variables on request.
-----------------------------------------------------------------------------------------------------------------------------------------
You can import modules to Python this is to reduce the overhead if it was already
usable by python and just not used. Modules are often called libraries.
-----------------------------------------------------------------------------------------------------------------------------------------
from sys import argv
ageinput = input("What is your age? ")
heightinput = input("What is your height? ")
weightinput = input("What is your wieght? ")

script, averageage, averageheight, averageweight = argv
#In the future we can add some conditional statements to compare the average to
the user input and print other things below!!!
print(f"The average age is {averageage} but your age is {ageinput}.")
print(f"The average height is {averageheight} but your height is {heightinput}.")
print(f"The average weight is {averageweight} but your weight is {weightinput}.")

The above code that I wrote is a good example of using both the argv and inputs
together to provide a cool mix of code. REMEMBER that the variables supplied to
argv are just normal variables and can be referenced with {}. You can even make
conditional statements after to say your under the average age your young or
over the average your old!
-----------------------------------------------------------------------------------------------------------------------------------------
IDEAS FOR YOUR OWN CODE! make a loading bar! [#################.................]
-----------------------------------------------------------------------------------------------------------------------------------------
This goes without saying but you can use f inside a 3 qoute string like so: f""" Some words {text} """ obviously
-----------------------------------------------------------------------------------------------------------------------------------------
f is not just for print you can use it with input too!!!
prompt=">"
firstnumber = input(f"Enter the first number{prompt}")
-----------------------------------------------------------------------------------------------------------------------------------------
verysimplecalc.py
eval will calculate the value of strings that are actually numbers and operators
like so: eval(f'{firstnumber} {operator} {secondnumber}')
eval is very useful
When using argv for calculations with eval remember that input considers the *
a special character so you will need to use \* to exclude it.
-----------------------------------------------------------------------------------------------------------------------------------------
ex15.py
Open and read can be used to open the contents of a file in python and then read
can be used to see the contents of said file. READ IS AN ATTRIBUTE
-----------------------------------------------------------------------------------------------------------------------------------------
OPEN: CREATES A FILE OBJECT.
so open will open a file but it will not return anything on its own.  Ex:
var = open(filename)
Open can be ran with modes of operation which are r, w and a
r is read, w is write and a is append, the default is read
BUT AGAIN this wont do anything on its own just prep the file.
To test this I did var = open(filename, r)
Then print(var)
and it just gave out this output: <_io.TextIOWrapper name='ex15_sample.txt' mode='r' encoding='UTF-8'>
basically showing that it has been opened and the type of encoding and mode but doesnt do anything else.
-----------------------------------------------------------------------------------------------------------------------------------------
OPEN has multiple modes:
    'r' : use for reading
    'w' : use for writing
    'x' : use for creating and writing to a new file
    'a' : use for appending to a file
    'r+' : use for reading and writing to the same file
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR:EX15 filename.close() AttributeError: 'str' object has no attribute 'close'
That is because that is the WRONG variable it wasnt opened pay attention to the
variable names.
-----------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------
