The print command has ()s after it like so print()
It can print letters numbers and variables
# is the comment character
-----------------------------------------------------------------------------------------------------------------------------------------
For some odd reason the print("string", 1 + 2) fails I do not understand why
Its because you were using python 2.0 derp to avoid this use python3.6 ex2.py
-----------------------------------------------------------------------------------------------------------------------------------------
PEMDAS isnt as simple as the acronym suggests its actually better represented
as PE (M&D) (A&S) so Parenthesis, exponents THEN Multiplication and division
happen at the same time andaddition and subtraction happen at the same time
after that.
-----------------------------------------------------------------------------------------------------------------------------------------
Variables are easily declared in python just variable name = something
-----------------------------------------------------------------------------------------------------------------------------------------
f is a formatting character and is used to reference variables inside strings
for example print(f"My age is {my_age}.") pretty simple but keep in mind that in
a print statement the f goes INSIDE the Parenthesis but outside the quotations
-----------------------------------------------------------------------------------------------------------------------------------------
You can use f in variables like so: var1 = f"Its the same {var}" REMEMBER that
-----------------------------------------------------------------------------------------------------------------------------------------
You can also use stat a string with a {} in a variable and then you can change
it later. For example x = "No f yet but we will leave some {} here"
print(x.format(brackets))
You only need one variable and the print function. I assume there are other ways
to do this without the print function though. Its very interesting REMEMBER THIS
-----------------------------------------------------------------------------------------------------------------------------------------
You can use the + to concatenate strings and variables as well
-----------------------------------------------------------------------------------------------------------------------------------------
# the .format('snow')) can be used to change the values within the curly brackets
#but if there are multiple brackets how do you differentiate them from each other?? It goes first 
come first serve like so:
print(x.format(first, second, third))
#The reason this is important is that it can be used in loops or other situations
 where a string is already defined? 
-----------------------------------------------------------------------------------------------------------------------------------------
f is the same as .format(). For example
print("Its fleece was white as {}".format('snow'))
The above code is the same as:
print(f"Its fleece was white as {snow}")
-----------------------------------------------------------------------------------------------------------------------------------------
print("a" * 10) This will print the character a 10 times interesting that you can
do math on strings.
-----------------------------------------------------------------------------------------------------------------------------------------
,end="" allows you to print on the same line. If you use: + " " it will perform
a line break which may not be the desired result.
So Remember , end=" " means no line break where + will add a line break
-----------------------------------------------------------------------------------------------------------------------------------------
placeholdervar = {}{}{}{}{}{}{}{}

print(placeholdervar.format('1','2','3','4','5','6','7','8'))

-----------------------------------------------------------------------------------------------------------------------------------------
\ is the escape character good for escaping out of quotes and getting around
special characters
-----------------------------------------------------------------------------------------------------------------------------------------
"""This is a multi line string
As long as it starts and ends with
 \"\"\" characters. It will continue
forever"""
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR: I used a /n instead of a \n DONT DO THAT!
-----------------------------------------------------------------------------------------------------------------------------------------
There are a good amount of escape character combinatations
WHY use these?
\t tabs
\n as mentioned goes to a new line
\r does a carriage return which is like a new line except in some situations
its a little different
\ combined with a special char will exclude a special characters like ' or "
There are also \ combinations that allow different formatting
-----------------------------------------------------------------------------------------------------------------------------------------

 end=' ' What is it again?
            First: its used only with the print command
            Second: The print command will always go to a new line
            But if you dont want the output to go on a NEW line but stay on the SAME line
            you should use end = ' '
            This tells Python to end the string with a space instead
            Thats really all there is to it.
REMEMBER^
-----------------------------------------------------------------------------------------------------------------------------------------
REMEMBER: User input is easy just assign a variable like so:
usrinput = input()
To make this easier lets put the prompt as a question to save us a print() cmd
whatisyourage = input("Enter your age.")
-----------------------------------------------------------------------------------------------------------------------------------------
You can put the prompt inside the input like so: var = input("Enter your name:")
-----------------------------------------------------------------------------------------------------------------------------------------
pydoc! its like the man pages for commands,keywords and anything in python!
REMEMBER IT
-----------------------------------------------------------------------------------------------------------------------------------------
pydoc file will open a file and write or append to it!
-----------------------------------------------------------------------------------------------------------------------------------------
pydoc sys This will allow you to change path names, stdin and stuff like that?
IDK what I DO know is that sys will allow you to import more code that is built
in to python.
-----------------------------------------------------------------------------------------------------------------------------------------
pydoc os

-----------------------------------------------------------------------------------------------------------------------------------------
Argv - you import this MODULE with sys like so from sys argv you can then assign it
arguments that you will have to provide it to run the python script. So when
typing in the command python3.6 you need to specify what the script for one then
the following variables that will be sent to argv. When the script is ran it
unpacks argv and will send your code those variables on request.
-----------------------------------------------------------------------------------------------------------------------------------------
You can import modules to Python this is to reduce the overhead if it was already
usable by python and just not used. Modules are often called libraries.
-----------------------------------------------------------------------------------------------------------------------------------------
from sys import argv
ageinput = input("What is your age? ")
heightinput = input("What is your height? ")
weightinput = input("What is your wieght? ")

script, averageage, averageheight, averageweight = argv
#In the future we can add some conditional statements to compare the average to
the user input and print other things below!!!
print(f"The average age is {averageage} but your age is {ageinput}.")
print(f"The average height is {averageheight} but your height is {heightinput}.")
print(f"The average weight is {averageweight} but your weight is {weightinput}.")

The above code that I wrote is a good example of using both the argv and inputs
together to provide a cool mix of code. REMEMBER that the variables supplied to
argv are just normal variables and can be referenced with {}. You can even make
conditional statements after to say your under the average age your young or
over the average your old!
-----------------------------------------------------------------------------------------------------------------------------------------
IDEAS FOR YOUR OWN CODE! make a loading bar! [#################.................]
Do this in your journal application that you will write
-----------------------------------------------------------------------------------------------------------------------------------------
This goes without saying but you can use f inside a 3 qoute string like so: f"""
 Some words {text} """ obviously
-----------------------------------------------------------------------------------------------------------------------------------------
f is not just for print you can use it with input too!!!
prompt=">"
firstnumber = input(f"Enter the first number{prompt}")
-----------------------------------------------------------------------------------------------------------------------------------------
verysimplecalc.py
eval will calculate the value of strings that are actually numbers and operators
like so: eval(f'{firstnumber} {operator} {secondnumber}')
eval is very useful as you dont have to convert the strings to integers before making calculations
When using argv for calculations with eval remember that input considers the *(multiplication)
a special character so you will need to use \* to exclude it.
-----------------------------------------------------------------------------------------------------------------------------------------
ex15.py
Open and read can be used to open the contents of a file in python and then read
can be used to see the contents of said file. READ IS AN ATTRIBUTE
-----------------------------------------------------------------------------------------------------------------------------------------
OPEN: CREATES A FILE OBJECT.
so open will open a file but it will not return anything on its own.  Ex:
var = open(filename)
Open can be ran with modes of operation which are r, w and a
r is read, w is write and a is append, the default is read
BUT AGAIN this wont do anything on its own just prep the file.
To test this I did var = open(filename, r)
Then print(var)
and it just gave out this output: <_io.TextIOWrapper name='ex15_sample.txt'
mode='r' encoding='UTF-8'>
basically showing that it has been opened and the type of encoding and mode but
doesnt do anything else.
-----------------------------------------------------------------------------------------------------------------------------------------
OPEN has multiple modes:
    'r' : use for reading
    'w' : use for writing
    'x' : use for creating and writing to a new file
    'a' : use for appending to a file
    'r+' : use for reading and writing to the same file
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR:EX15 filename.close() AttributeError: 'str' object has no attribute 'close'
That is because that is the WRONG variable it wasnt opened pay attention to the
variable names.
-----------------------------------------------------------------------------------------------------------------------------------------
There are many attributes to a string object that you can manipulate these are:
• close – Closes the file. Like File->Save.. in your editor.
• read – Reads the contents of the file. You can assign the result to a variable.
• readline – Reads just one line of a text file.
• truncate – Empties the file. Watch out if you care about the file.
• write('stuff') – Writes ”stuff” to the file.
• seek(0) – Move the read/write location to the beginning of the file.
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR: EX16 write takes only 1 argument SO my theory that it will overwrite
itself is wrong and that is ok its good to ask questions it helps to master code
target.write(line1,line2,line3)
TypeError: write() takes exactly one argument (3 given)
-----------------------------------------------------------------------------------------------------------------------------------------
Pause a script by placing an input("CONTINUE?") in the code this is not obviously a good idea for 
code that needs to run unattended but its very good for ensuring that a code is ran with permission
from a user.
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR EX16 Indentation Error: unexpected indent
I guess spacing is an important concept in python
but usually only at the beginning of the lines. EX:
 target.write(line1)
 target.write("\n")
 target.write(line2)
 target.write("\n")
 target.write(line3)
 target.write("\n")
-----------------------------------------------------------------------------------------------------------------------------------------
Even though write takes ONE argument
You can use + to get around that!
DONT use commas or you will get the error above!
-----------------------------------------------------------------------------------------------------------------------------------------
will the f parameter work with write? It does yes! and it makes it a bit easier
as you dont have to put the +'s and the "" around every \n
target.write(f"{line1} \n {line2} \n {line3} \n")
-----------------------------------------------------------------------------------------------------------------------------------------
At this point we can PRINT and we can read and write to files, pretty good really!!! KEEP UP THE GOOD
WORK!!!!
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR EX 17: NameError: name 'PRINT' is not defined
I wanted to see if python was case sensitive, looks like that is a YES
-----------------------------------------------------------------------------------------------------------------------------------------
You can run functions in print(f"") to do so include them in {} as well
ex: print(f"Does the file exist? {exists(file)}")
-----------------------------------------------------------------------------------------------------------------------------------------
REMEMBER input() is a good way to pause a file from executing just press ENTER
to continue with the script. Pretty handy for pausing python until there is user interaction
-----------------------------------------------------------------------------------------------------------------------------------------
ACTIVITY Have python run a script creating file objects from log files and searching for errors 
in those in a live stream!!! 
-----------------------------------------------------------------------------------------------------------------------------------------
the len function will calculate the length of a file in storage. It works with
string variables as well len(stringvar) will count the characters in the string
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR:EX17.1 When combining open and read in one variable like so:
variable = open(othervar).read()
you CANNOT then perform variable.close() it will fail
I am unsure as to why and I dont even know how to check so I will have to return
to this later to discover.
-----------------------------------------------------------------------------------------------------------------------------------------
Python separates multiple code lines by spacing but you can also use ; to
separate code lines cd ../
-----------------------------------------------------------------------------------------------------------------------------------------
FUNCTIONS:
IMPORTANT NOTES: User defined Functions have specific rules. They are listed here
1.Must begin with def
2.Function names can only be characters and _'s no other characters NONE OF
THESE !@#$%^&*()-=+;:'",<.>/?[{]}\|
3.Parenthesis go after the name
4.Put arguments in the parenthesis, separate them by commas
5.Arguments have to have unique names
6.The parenthesis end with a :
7.Indent all things the function will do with 4 characters or 1 single TAB
8.DEINDENT at the end

IMPORTANT NOTES: RULES REGARDING CALLING USER DEFINED FUNCTIONS
1.You can run user functions by mentioning their name
2.Just use () after the name with arguments in those ()s separated by commas
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR: EX18  print_two("Zed,"Shaw")
                       ^
SyntaxError: invalid syntax

If you look I forgot to close the first argument in a quote
-----------------------------------------------------------------------------------------------------------------------------------------
Function arguments are LOCAL only if you call the function and assign arg1 with Hello
and arg2 with There and then you call the function it will show Hello There
BUT if after the function call you attempt to print the value of arg1 it will
show as undefined
-----------------------------------------------------------------------------------------------------------------------------------------
ex18.py
Can you declare a variable with the same name? Not really
x=3
x=4
print(f"The value of {x} is: ")
In the above code the first x=3 statement will declare the varibale x
the second will overwrite the value of x to 4 it does not make a new variable
called x.
-----------------------------------------------------------------------------------------------------------------------------------------
REVIEW: ex18.py
The below code is confusing seems straight forward but the way Zed described it
made it sound more complicated. He said:
The problem with print_two is that it’s
not the easiest way to make a function. In Python we can skip the whole unpacking
arguments and just use the names we want right inside () .

So what I gather from this is that using *args is essentially asking python to
unpack ALL in the variable args and use it as the parameters for this function

But why is that more difficult? Still not answered but it has something to do
with potential args?

def print_two(*args):
    arg1, arg2 = args
    print(f"arg1: {arg1}, arg2: {arg2}")
-----------------------------------------------------------------------------------------------------------------------------------------
REVIEW ex 19.1.py
I get syntax errors when attempt to feed a function an integer which I thought
was strange:
In other words this works:
calculator("90","/","2")
BUT this DOES NOT:
calculator(100,-,6)
I do not know why....
I DO know why its because the function calculator that you made uses eval which takes STRINGS and 
performs math on those strings. If you rewrote the function do handle ints by converting user input
to strings like so: 
number1=int(input("Enter the first integer"))
Still had to use eval though as operators need a dictionary to get around that
dictionary is a key and a value pair like an associative array in javascript. 
SO its a bit advance but not THAT hard, however I will wait till we get there in futher activities.
-----------------------------------------------------------------------------------------------------------------------------------------
** is the operator for exponents
-----------------------------------------------------------------------------------------------------------------------------------------
ex19.1.py When using inputs they appear as they are in the code. Some coding
languages execute those first but not python which is cool.
-----------------------------------------------------------------------------------------------------------------------------------------
You can supply the function with script variables and they do not have to have
the same name as the arguments. But of course they can if you want.
-----------------------------------------------------------------------------------------------------------------------------------------
REMEMBER: EX19.py
Does making the variable amount_of_cheese change the variable cheese_count in the function? No,
those variables are separate and live outside the function. They are then passed to the function,
and temporary versions are made just for the function’s run. When the function exits these tem-
porary variables go away and everything keeps working. Keep going in the book, and this should
become clearer.
-----------------------------------------------------------------------------------------------------------------------------------------
A variable can reference itself to increase its own value
x = x + 1
To save writign you can do +=
x += 1
Keep your mind open: you can do this with other variables too of course
x += y
-----------------------------------------------------------------------------------------------------------------------------------------
EX20.py if we print the entire file then print each line by line WITHOUT rewinding it does the
line by line print nothing as its the EOF(end of file)? Or does it automatically rewind and
the rewind in ex20 unnecessary? REWIND IS NECESSARY otherwise blank values will be given
as I suspected
-----------------------------------------------------------------------------------------------------------------------------------------
REMEMBER:
A file in Python is kind of like an old tape drive on
a mainframe or maybe a DVD player. It has a ”read head,” and you can ”seek” this read head
around the file to positions, then work with it there. Each time you do f.seek(0) you’re moving
to the start of the file. Each time you do f.readline() you’re reading a line from the file and
moving the read head to right after the \n that ends that line. This will be explained more as you
go on.
-----------------------------------------------------------------------------------------------------------------------------------------
REMEMBER: seek(0) DOES NOT MEAN the first line but rather the first byte keep that in mind
-----------------------------------------------------------------------------------------------------------------------------------------
When using readline() the file keeps track of what line is being read. Readline will look
for a \n or a break and gatther that \n then stop and that is how it knows when to return
the output
-----------------------------------------------------------------------------------------------------------------------------------------
EX21.py You can of course have function use their return value to supply the argument
to another function:what = add(age, subtract(height, multiply(weight,divide(iq,2))))
As long as they have more than one argument you can daisy chain them like this
-----------------------------------------------------------------------------------------------------------------------------------------
REMEMBER: you can declare variables in a print statement by using ,'s or by using +
the ,'s will print on the same line where the + sign will make it appear on a new line
example with commas: print("That becomes: ", what, "Can you do it by hand?")
-----------------------------------------------------------------------------------------------------------------------------------------
Why does Python print the formula or the functions ”backward”? Its simple. In excercise 20
all of the functions have both a and b parameters. For parameter a we provide the function
with the variable age. But for the b value we substitute if for another function. We do this
multiple times, linking all of the functions together. Python then goes and says I know the
value of parameter a its age. but the value of b is all of these other functions and it begins
calculateing those based on their innermost parenthesis which is why it works inside
out. Each inner parenthesis must be resolved before it can calculate final value of b.
-----------------------------------------------------------------------------------------------------------------------------------------
There are other ways of importing packages:
you can do:
from sys import argv
OR you can do:
import sys
script, input_encoding, error = sys.argv
-----------------------------------------------------------------------------------------------------------------------------------------
Inside a function you can daisy chain another function of course as we did before you can even feed
the inside function the same variables as the outside function
def main(language_file, encoding, errors):
    line = language_file.readline()
# if line exists?
    if line:
        print_line(line, encoding, errors)
        return main(language_file, encoding, errors)
-----------------------------------------------------------------------------------------------------------------------------------------
if statements begin with if then follow the condition then a : to begin the then statement.
Then indent 4 spaces in manually or with tab and state what will hapen if true.
-----------------------------------------------------------------------------------------------------------------------------------------
.strip() - removes spaces and linebreaks at the end of strings
-----------------------------------------------------------------------------------------------------------------------------------------
.encode - Encodes to UTF-8 UTF-16 and others like UTF-32 which are computer langs
-----------------------------------------------------------------------------------------------------------------------------------------
.decode - decodes bytes back to strings or in other words computer readable to human readable
-----------------------------------------------------------------------------------------------------------------------------------------
For ex23.py had to enable utf-8 for all languages on my terminal by running:
sudo dpkg-reconfigure locales
and selecting all.
Then re-download the language file as it affected the entire computer not just the terminal
-----------------------------------------------------------------------------------------------------------------------------------------
”DBES” which stands for ”Decode Bytes Encode Strings”. I say ”dee bess” in my head when I have to
convert bytes and strings. When you have bytes and need a string , ”Decode Bytes”. When you have
a string and need bytes , ”Encode Strings”
-----------------------------------------------------------------------------------------------------------------------------------------
 In if statements you can do if something: and that will check and see if its not null.
-----------------------------------------------------------------------------------------------------------------------------------------
# Without a conventional loop this will loop until the line is null and that is kind of amazing
# I didnt even notice this before but the function main keeps calling itself
# making a loop without a conventional loop
def main(language_file, encoding, errors):
    line = language_file.readline()
# if line exists? YES
    if line:
        print_line(line, encoding, errors)
        #calls itself
        return main(language_file, encoding, errors)
-----------------------------------------------------------------------------------------------------------------------------------------
REVIEW: errors strict?? Is this some sort of built in error checking?
-----------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------
MISUNDERSTOOD: When using print(f"") its only neccessary when you want to combine strings WITH variables.
You can just do print(var) with no quotes and no f if you just want the var to print.(Tested this)
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR EX24.PY:
File "ex24.py", line 23
    def secret_formula(started)
                              ^
SyntaxError: invalid syntax
FORGOT TO ADD A : after the ()'s for the function
-----------------------------------------------------------------------------------------------------------------------------------------
=========================================================================================================
REVIEW
=========================================================================================================
After quite some time without using python I decided to review what I have learned so far. Much I have forgotten but only temporarily as
I have simply archived the knowledge and need to refreshen it and not learn it all anew. However i have decided to run each .py script 
and also run each section of it to ensure I understand it. 

I picked up some things I must have missed the first time and am noting them here in this review section:

The < and > signs will automatically change the returned value to a boolean on their own which I found interesting and probably must be 
true in other coding languages as well 

EX:
print("How intriguing that it makes the returned values a boolean automatically when running a < or > operation like 3+2<5-7. The 
answer of course is",3+2<5-7,".The less sign must change the statement automatically within phython to a boolean return value") 
---------------------------------------------------------------------------------------------------------
REMEMBER: when calling functions with arguments you can perform math and even call variables for the
arguments

---------------------------------------------------------------------------------------------------------
REMEMBER: Arguments are place holders nothing more.
The function below has 2 arguments but when you call the function the names of the supplied arguments canbe direct input or variables with different or the same name as the argument itself. For example:

def areaofsq(variable1,variable2):
    print(f"The area of the square is equal to: ", variable1*variable2)

height=10
width=10
areaofsq(height,width)

areaofsq(10,10)

areaofsq(height-2,width-1)


The above code all works!

=========================================================================================================
END REVIEW
=========================================================================================================
THINKOUTSIDETHEBOX

In the below snippet of code which is found in excercise 24 you see that
 you can declare multiple variables at once using a function on the other
 end like so
 beans, jars, crates = secret_formula(start_point) # declares 3 variables
 and assigns them the function result
-----------------------------------------------------------------------------------------------------
Also in ex24.py is the ability to assign multiple brackets values by 
assigning the return of the secret_formula function to a variable and then
leaving blank brackets in a print statement and filling them in with .format 
the use of an * to assign multiple values is quite clever
formula = secret_formula(start_point)
print("We'd have {} beans, {} jars, and {} crates.".format(*formula))
-----------------------------------------------------------------------------------------------------
ERROR: EX25.py 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/foss-ter/MYSELF/Python/Exercise/25/ex25.py", line 4, in break_words
    words=stuff.split('')
ValueError: empty separator

CAUSE: Forgot to add a delimiter
RESOLUTION: When using .split('') dont leave it empty put a delimiter in there like so:
.split(' ')
-----------------------------------------------------------------------------------------------------
 didnt know that you can import .py files when doing so first open the python cli by typing 
python3.6 and pressing enter
Then use import filename WITHOUT the .py to import variables, functions and whatever else ya 
have in that file. 
When referencing commands simply prefix the filename like so ex25.myfunction
-----------------------------------------------------------------------------------------------------
So in EX25 we just made a local module without even knowing about it! That is ridiculous!
Well that is really cool and just like with most modules you can run help (modulename) or in this
case help (ex25) and it will print out the comments you made in the code above each function!

When creating the module python will create a dir called _pythoncache_ which I do not know what it does
as of yet save that I know it gets created at the moment the local module is loaded into python.

My guess is that once that is created we can run the code that we ran in the excercise to execute those
functions in the dir where pythoncache is stored and it will check there for the functions wihtout having
to specify ex.function name. 

I decided to test this and it failed if I took out the ex25 in front of the functions. BUT I tried 
with the ex25 in front and I left out the import and it failed AGAIN

THEN I added the import and it all worked. SOOOOOOOO
long story short you can tun functions from another python script if you import the other script via
import. But why would you do this????

Simple you can divide your functions, methods, conditional statments up for cleaner looking code
Now is it wise for time complexity? Idk it may be an issue, especially with the scale of large
companies. 

How can you avoid specifying the ex25 each time that you reference ex25? 
change the import statement to from ex25.py import * 
-----------------------------------------------------------------------------------------------------
REMEMBER:
When importing modules that you have created, you must reference them using ex25.functionname
-----------------------------------------------------------------------------------------------------
Other insights and notes on ex25 is the split, sorted and pop attributes or functions (whatever they 
are) 
split will split a string based on some sore of delimiter
sort will sort a string alphabetically and most likely has the ability to sort numbers as well
pop will remove a word from a list of strings. It may be able to remove numbers as well. 
RESEARCH: Should pydoc this most likely.
-----------------------------------------------------------------------------------------------------
QUESTION
What is the difference in a method, function and attribute anyway?
-----------------------------------------------------------------------------------------------------
pydoc -b will generate a list of installed modules and their help pages which is really cool so keep
that in mind as a resource for ya.
-----------------------------------------------------------------------------------------------------
When fixing excercise 26 I am proud to say I only had 1 syntax error and 1 logical error the f in a 
print statement. And I fixed them all in like 20 minutes, SO I am kind of a big deal now :P
-----------------------------------------------------------------------------------------------------
So booleans are the same and excercise 27 and 28 were pretty painful as it was some PRETTY basic 
sh*t you dont even need to be able to code to understand these concepts but having some coding 
background with java this was a VERY painful excercise but being the completionist that I am I sort
of completed 28 but I did skip 27 as its a waste of time and energy.... moving on!
-----------------------------------------------------------------------------------------------------
SO just like functions, if statements in python are have colon and all things within the if statment
(except the declaraiton) is indented and the indention determines what is in the then statement.
if 1 != 0: #This is the declaration
	print("I tabbed here!")
var=print("if statement is over")
----------------------------------------------------------------------------------------------------
Its getting a bit tedious at this point (ex30) so from now on I will be skippping excercise and doing
only those that have a point to them and not just repeated information. 

I will be annoting new things that I come across here instead of doing the entire excercise to save
time.

EX30
The Else if statement:
elif variable < variable
	print("Someting")

The Else statement
else:
print(something) 

EX31
Nested if statements
if somevar == somevar
	print()
	if somevar == somevar
		print()

The nested if is just indented more and so is its "then" statement which is actually an indention of
its own.

I did EX32 as my loop game could use some work
LOOPS and a bit of arrays

DECLARING A LIST IN PYTHON
varname = [1,2,3,4,5,6,7] 
# thats all there is to lists really add some qoutes if you want strings
----------------------------------------------------------------------------------------------------
I was wrong about lists they are actually called lists and there are arrays as well. So what is the 
difference between them? 
----------------------------------------------------------------------------------------------------
DECLARING A FOR LOOP
for i in something:
    print("print or do something here")
The i can be replaced with anything you wish 
----------------------------------------------------------------------------------------------------
The while loop continues the block of code over and over again until the statment is false
BY THE WAY the BLOCK of code I mentioned begins with the : and ends once you STOP tabing 
Like so
while i<10:
    print("this is the block!")
print("The block is now over with this statment.")

As the while loops checks for a condition its like an if statement! and this is true for all coding
languages and not just with python so keep that in mind. 

Same with the for loop it continues until it reaches the end of its iteration and that is true in 
other coding languages as well.
----------------------------------------------------------------------------------------------------
DECLARE A WHILE LOOP
i=0
numbers = []
while i < 6:
    print(f"At the top i is {i}")
    numbers.append(i)
	i = i + 1
----------------------------------------------------------------------------------------------------
Excercise 33 hints at the stack without mentioning it by word. The stack of numbers and the top is 
the current iteration of the while loop. The stack in coding is the most recent code where the oldest
 code is at the bottom and the newer code lies at the top its a concept that I need to understand
more fully in the future.
----------------------------------------------------------------------------------------------------
Also in ex33 you will change the code to a for loop (functionwhileloop.py)
What I learned when doing this with a range for loop is that the incremental user input doesnt matter
The array will include a solid list from the start number zero till you reach the number given by 
the user to stop at minus 1. That being said, on the very first iteration i does increase by the 
increment value but it then stops. I am still analyzing why....

Here is the code for ease of access:

def userinputwhileloop():

    i=1
    loopuntil= int(input("Enter an integer at which the loop will stop: "))
    numbers = []
    increment_value = int(input("Enter a value the code increments by:"))
    for i in range(0,loopuntil):
        print(f"At the top i is equal to {i}")
        numbers.append(i)
        i += increment_value
        print(f"What is the value of i? {i}")
        print("Numbers now: ", numbers)
        print("At the bottom i is {}".format(i))
      print("The numbers: ")
  
    for num in numbers:
      print(num)
userinputwhileloop()
----------------------------------------------------------------------------------------------------
So I modified the code and moved the incrementvalue BEFORE the numbers.append(i) and now the start 
of i is different and its actually stored in the numbers list but it still wont increment by 5,
 all it did was add 1 to the value after the first iteration. Still odd but I am going to continue
with the excercises so I can move on.
----------------------------------------------------------------------------------------------------
LOGICAL ERROR!
In excercise 35 I forgot to tab over the conditional statements in a while true loop.
for example
there was a function
def somefunction():
    somevar=True
    while somevar:
        choice = input(":")
    if choice == "Somthing":
    	somevar=False
	exit(0)

In the above code you can see where I messed up at. Essentially I forgot to tab over the if statment.
So the while loop was always true so it kept prompting for user input and it never reached the if 
statement below it!
----------------------------------------------------------------------------------------------------
Every if statment apparently must have an else statement. Is that true? Or is that more of a best
practice? Lets test it!

It's a best practice and honestly it should be required
----------------------------------------------------------------------------------------------------
Never nest more than 2 deep and try to do it in one nest
if
    if
----------------------------------------------------------------------------------------------------
Even if you dont call them functions cannot remain empty!!!!!
I didnt know that!!
----------------------------------------------------------------------------------------------------
When working with booleans and user input remember that even if you ask the user to input True or 
False the variable will remain true as it exists... I have even tried converting it to a boolean
and it still doesnt work its always true. Instead you should use a function that will return True or
False. 
----------------------------------------------------------------------------------------------------
REMEMBER THIS AND READ IT AGAIN AFTER MESSING WITH CLASSES!!!!
You have learned about lists. When you learned about while-loops you ”appended” numbers to the
end of a list and printed them out. There were also Study Drills where you were supposed to find all the
other things you can do to lists in the Python documentation. That was a while back, so review those
topics if you do not know what I’m talking about.
Found it? Remember it? Good. When you did this you had a list, and you ”called” the function append
on it. However, you may not really understand what’s going on so let’s see what we can do to lists.
When you write mystuff.append('hello') you are actually setting off a chain of events inside Python
to cause something to happen to the mystuff list. Here’s how it works:
1. Python sees you mentioned mystuff and looks up that variable. It might have to look backward
to see if you created it with = , if it is a function argument, or if it’s a global variable. Either way it has to find the mystuff first.
2. Once it finds mystuff it reads the . (period) operator and starts to look at variables that are a
part of mystuff . Since mystuff is a list, it knows that mystuff has a bunch of functions.
3. It then hits append and compares the name to all the names that mystuff says it owns. If append
is in there (it is), then Python grabs that to use.
4. Next Python sees the ( (parenthesis) and realizes, ”Oh hey, this should be a function.” At this
point it calls (runs, executes) the function just like normally, but instead it calls the function with
an extra argument.
5. That extra argument is ... mystuff ! I know, weird, right? But that’s how Python works, so it’s
best to just remember it and assume that’s the result. What happens, at the end of all this, is
a function call that looks like: append(mystuff, 'hello') instead of what you read, which is
mystuff.append('hello') .
----------------------------------------------------------------------------------------------------
REMEMBER: WHEN DO I USE A LIST?
1. If you need to maintain order. Remember, this is listed order, not sorted order. Lists do not sort
for you.
2. If you need to access the contents randomly by a number. Remember, this is using cardinal num-
bers starting at 0.
3. If you need to go through the contents linearly (first to last). Remember, that’s what for-loops
are for.
----------------------------------------------------------------------------------------------------
REMEMBER!
When using negative numbers on the index for a list that will reverse the order that the list is 
referenced. For example:
mylist = ["first", "second", "Third" , "fourth"]
print(mylist[-1], "This will return fourth or the VERY LAST item in a list!")
Think of the list as having a zero at the end that is not INSIDE the list as -0 is just 0 or he first
character of the list.
----------------------------------------------------------------------------------------------------
PYDOC LIST is an amazing list of all attributes that lists have. So when you need to work with lists
Review that information!
----------------------------------------------------------------------------------------------------
A list is declared like so mylist = ["item1", "item2"] etc....
----------------------------------------------------------------------------------------------------
Join will join the list items together in a single string. You can specify a delimiter that will 
insert itself between each column, like so: 

mylist = ["first", "second", "Third" , "fourth"]

print("|".join(mylist))

This would print first|second|Third|fourth
----------------------------------------------------------------------------------------------------
Data Structures are a way to structure or organize data, that is really all there is to it! Not to 
say that the data structures dont get stupidly complex, keep that in mind that they organize data. 

You have been using a simple data structure this whole time, its called a list!
----------------------------------------------------------------------------------------------------
The author compared a list to a deck of cards which made it a little easier to understand how to 
break down a complex data structure (not that a list is complicated) its a good strategy for breaking
down complex data sructures to things we see everyday in the realworld.
----------------------------------------------------------------------------------------------------
Dictionaries are just like assocaitive arrays in javascript they are value and key pairs, There isnt
much of a difference between a list and a dictionary except lists use brackets or []'s and are in 
order while dictionaries use {}'s or braces.
----------------------------------------------------------------------------------------------------
Dictionaries are like lists in that they are a DATA STRUCTURE! 
PYDOC DICT to find more info!
----------------------------------------------------------------------------------------------------
Objects are a way to store functions, for loops and really any other code that you want into a block
There are different types of obhjects but for lesson 40 we the object we want is a class. 
When you write code for an object and then call it you are actually creating that object for the 
first time. If you call it again it creates another object that is completely different that the
previous one. They are separate objects at that point. Its strange but I didnt know this.
----------------------------------------------------------------------------------------------------
Creating an object its called instatiate which is the equivalent in python. When you create an object
in most coding languages you have to create it calling that class you made. To do so you MUST assign 
it to a variable. The name of that var doesnt matter. For example: var = MyObject() When calling a 
function from the object you created you will need to do 
varthatwasassignedtotheobj.functioname(parametersifany). 
----------------------------------------------------------------------------------------------------
We are gonna drill a little deeper into what happens when instantiate a new object:
1. Python looks for MyStuff() and sees that it is a class you’ve defined in your import above
2. Python crafts an empty object with all the functions you’ve specified in the class using def.
3. Python then looks to see if you made a ”magic” __init__ function, and if you have it calls that 
   function to initialize your newly created empty object. UGHH I hate when they dont know so they 
   just call it magic or they are too lazy to explain it to me, freakin annoying. It looks like that
   __init__ is a keyword for python and initializing objects. You can pydoc __init__
4. In the MyStuff function __init__ I then get this extra variable self , which is an empty object 
   Python made for me, and I can set variables on it just like you would with a module, dictionary,
   or other object.
5. In this case, I set self.tangerine to a song lyric and then I’ve initialized this object.
6. Now Python can take this newly minted object and assign it to the thing variable for me to work
   with.
7. Classes are like blueprints or definitions for creating new mini-modules. 
8. Instantiation is how you make one of these mini-modules and import it at the same time.
   ”In- stantiate” just means to create an object from the class. 
9. The resulting created mini-module is called an object, and you then assign it to a variable to 
   work with it.
----------------------------------------------------------------------------------------------------
Excercise 40 reminds me of when I was doing plsql when we did the goblin,orc and elf object things
In fact its very similar as we had a base object and from that base object we created nested objects 
from that object. So while there were 7 types of elves, they were all elves. The base elves all
had a name and a race. SO the base would have what they have in common and the children of that base
just inheritted the object values of that base. 
----------------------------------------------------------------------------------------------------
So I think the __init__ function specifys what parameters that Song should have when its called. 
----------------------------------------------------------------------------------------------------
OBJECT VOCAB and DEFINITIONS
class Tell Python to make a new type of thing.
object Two meanings: the most basic type of thing, and any instance of some thing.
instance What you get when you tell Python to create a class.
def How you define a function inside a class.
self Inside the functions in a class, self is a variable for the instance/object being accessed.
inheritance The concept that one class can inherit traits from another class, much like you and your
parents.
composition The concept that a class can be composed of other classes as parts, much like how a car
has wheels.
attribute A property classes have that are from composition and are usually variables.
is-a A phrase to say that something inherits from another, as in a ”salmon” is-a ”fish.”
has-a A phrase to say that something is composed of other things or has a trait, as in ”a salmon 
has-a mouth.”
----------------------------------------------------------------------------------------------------
So the vocab on objects is a little strange, it all depends on the context. For example a class is
a type of object but when you drill down into specifics that definition is confusing. When you have
a class called Fish and a class called Salmon with inheritance on that Fish class. So far so good 
until you create an instance. That instance is also called an obnject, because it was created by a 
class which is an object. When I say it like this I realize its not really confusing after all.
----------------------------------------------------------------------------------------------------
What is inheritance? Inheritance is when you have a base class and create a class that uses that base
class as its starting point. What this looks like in code is class Humanoid(object); pass 
class Elf(Humanoid); pass

If I had given Humanoid a function instances created by the Elf class could call that function.
----------------------------------------------------------------------------------------------------
What is is-many or multiple inheritance? Well if I expanded on the elf class above and did 
class Drow(Elf); pass and if I then did Drizzit = Drow() then that would make drizzit inherit 3 
different classes, namely humanoid, Elf and Drow. Doing this is apparently a bad idea because it can
get confusing to humans.
----------------------------------------------------------------------------------------------------
super will run a function from the parent, but what happens when you have 2 parents? is it super 
super??
----------------------------------------------------------------------------------------------------
So what is the __init__ function and what is self??
Well I searched this online and __init__ is a reserved method in python.It behaves like a contructor
of the class and it should be the first method that is called when you run the script. Everytime an
instance is created it calls the __init__ method which is cool! Usually you have to destroy created
objects but that is not neccessary in Python. So __init__ can have requirements when you create 
instances so for example an init with self, height, weight as the parameters would need to be created
with those same paramters excluding self. So you couldnt do instance = classname() instead you would
do instance = classname(5'11, 210)

So what is Self? its actually just a naming convention for the first attribute for the init class you
could rename it to what ever you wanted but you would then need to use it when assging values of the
attributes to the instances themselves.

Lets give an example because this is too hard to do with out one:

class cargenerator(object):
    def __init__(self,speed,color):
        # Without using self.speed if you tried the print statement below it would fail as it doesnt
	# exist.
	self.speed = speed
	self.color = color	

car = cargenerator(250,'red')
print("The car's color is " ,car.color)

So in the above example we could have changed the value of the init function parameter to ANYTHING
But then when we assign the speed to itself we would need to change self.speed to whatever we set 
the first parameter to the __init__ function to. As such self is just a convention. The first 
argument of __init__ is the "self" argument.

But why is it needed to assigned speed to self? Isnt that obvious? No, not to Python it isnt. If we
tried to print out the value without assigning it then python wouldnt know what you wanted it would 
return the error: AttributeError: 'cargenerator' object has no attribute 'color'

When creating an instance you dont have to specify self just the values of the other parameters.
Alternatively you could do a car.color = red and car.speed = 300. its good to know multiple ways 
in which to do the same thing.

P.S. pass is used to create an empty class btw
----------------------------------------------------------------------------------------------------
What is Super?
Super is used to call functions (or whatever you want) from parent classes that the current class 
you are in needs access to. This includes attributes and anything really. 
----------------------------------------------------------------------------------------------------
When it comes to creating your own application you can use the following steps to help you get 
started:
Write or draw about the problem
extract key concepts from 1 and research them
create a class heirarchy and object map for the concepts
code the classes and a test to run them
repeat and refine
----------------------------------------------------------------------------------------------------



