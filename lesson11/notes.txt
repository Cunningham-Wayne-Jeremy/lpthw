----------------------------------------------------------------------------------------------------------------------------------------
Type irb in the terminal to run commands immediately similar to running python without any commands
----------------------------------------------------------------------------------------------------------------------------------------
puts will print to console
-----------------------------------------------------------------------------------------------------------------------------------------
ruby files end in .rb
----------------------------------------------------------------------------------------------------------------------------------------
# is a single line comment
----------------------------------------------------------------------------------------------------------------------------------------
BACKSLASH \ is the escape character but if you dont use it right it will make
some of your code disappear interesting!
----------------------------------------------------------------------------------------------------------------------------------------
You can use single and double qoutes in puts
----------------------------------------------------------------------------------------------------------------------------------------
Sadly multiline comments DO NOT EXIST IN RUBY HUGE BUMMER
----------------------------------------------------------------------------------------------------------------------------------------
== checks if tow somethings are equal can be strings and numbers
number == number
----------------------------------------------------------------------------------------------------------------------------------------
ruby uses the classic math operators % is the wierd one it divides and subtractsshowing what remains
----------------------------------------------------------------------------------------------------------------------------------------
You can reference variables directly in strings like so
puts "There are #{cars} cars available."
----------------------------------------------------------------------------------------------------------------------------------------
When adding numbers within strings make sure that they are actually declared i the = as a number not a string otherwise they will be concatenated together.
----------------------------------------------------------------------------------------------------------------------------------------
When using variables in strings you have to use double quotes with single it
----------------------------------------------------------------------------------------------------------------------------------------
This is probably not important but in case a redundancy like this may come in
handy I will note it. You can put string in a string using the #{} format #{'somestring'}
----------------------------------------------------------------------------------------------------------------------------------------
ERROR in lesson 8 1 2 3 4
one two three four
Traceback (most recent call last):
	1: from ex8.rb:7:in `<main>'
ex8.rb:7:in `%': key{third} not found (KeyError)
Did you mean?  :thrid
MISSPELLED third
----------------------------------------------------------------------------------------------------------------------------------------
So the % character can make it easier to use the same formatting for multiple items apparently
see ex8 for more deets. I dont understand ex 8 enough to be honest so here is a link explaining
more about it but it still went over my head: http://teohm.com/blog/start-using-ruby-percent-notation/
So I decided to run the examples that are included in the link in ex 8
ACTUALLY I decided to come back after and learn what each does on here http://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Literals#The_.25_Notation
and here https://en.wikibooks.org/wiki/Ruby_Programming
----------------------------------------------------------------------------------------------------------------------------------------
When using puts There are 3 ways to go to a new line.
First you can just put a blank puts:
puts "one"
puts
puts "two"
THOUGH this would double space stuff which may be nice!
Second you can add commas to the puts and put each item in quotations:
puts "one", "two" ,"three"
Lastly you can print on a new line with the /n command that "command" is actually called
an escape sequence and there are a bunch of them but /n is really the only cool one.
puts "one \n two \n three" OR puts "one\ntwo\nthree"
----------------------------------------------------------------------------------------------------------------------------------------
LESSON 10 ERROR:
Ok so for some reason I got this output:
/tI'm tabbed in
/t I'm tabbed in are we the same?
I'm split/non a line
I'm \ a \ cat.

I'll do a list:
	* Cat food
	* Fishies
	* Catnip
	* Grass
So Fat cat worked but the others didnt...Without looking at the text i found the problem:
BACKSLASH NOT FORWARD SLASH SINNER!
----------------------------------------------------------------------------------------------------------------------------------------
LIST OF ESCAPE SEQUENCES!!!!!!

\\ Backslash ()
\' Single-quote (’)
\" Double-quote (”)
\a ASCII bell (BEL)
\b ASCII backspace (BS)
\f ASCII formfeed (FF)
\n ASCII linefeed (LF)
\r ASCII Carriage Return (CR)
\t ASCII Horizontal Tab (TAB)
\uxxxx Character with 16-bit hex value xxxx (Unicode only)
\v ASCII vertical tab (VT)
\ooo Character with octal value ooo
\xhh Character with hex value hh
----------------------------------------------------------------------------------------------------------------------------------------
SOOO escape sequences do not work in irb JUST FYI
----------------------------------------------------------------------------------------------------------------------------------------
gets.chomp will ask input from the user look at what else you can do with get
and why is it called chomp
----------------------------------------------------------------------------------------------------------------------------------------
OK the difference in print and puts.Puts will place every puts on a new line
Prints will not do a new line without specifying it. Just use Puts UNLESS
you are getting user input then use print that makes sense!
----------------------------------------------------------------------------------------------------------------------------------------
OTHER WAYS TO USE GET:
----------------------------------------------------------------------------------------------------------------------------------------
https://en.wikibooks.org/wiki/Ruby_Programming/Strings
single qoutes versus double???
Well single only allow you 2 escape sequences! \' and \\
AND as mentioned previously single qoutes dont support #{} Syntax
THAT WIKI ABOVE IS GOLD use as a reference as you continue whooping ass!!
----------------------------------------------------------------------------------------------------------------------------------------
So lesson 11 shows a built in function gets that accepts user input and one that
can be used with other built in functions namely chomp so gets.chomp

A couple of questions on get are:

What is get what does it do?
Gets will take data from standard output OR the next output from the terminal and
it will take and put that output and adds a  new line so like this: output\n

What does chomp do? It removes the \n from the STDOUT added by get

Is get a built in function? YES its listed here, GOOD JOB for seeking out knowledge
https://ruby-doc.org/docs/ruby-doc-bundle/Manual/man-1.4/function.html

If get is a function and so is chomp can you compile other functions together
like so gets.chomp? YES you totally can that is very powerful! just add a dot
between them and your golden. Obviously some functions wont play too nice with
eachother but it should be rare.
----------------------------------------------------------------------------------------------------------------------------------------
chop will chop the string at the specified number returning only a letter OR
you can specify a range like chop[0..20] the first letter is 0 remember that!
