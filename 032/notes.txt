The print command has ()s after it like so print()
It can print letters numbers and variables
# is the comment character
-----------------------------------------------------------------------------------------------------------------------------------------
For some odd reason the print("string", 1 + 2) fails I do not understand why
Its because you were using python 2.0 derp to avoid this use python3.6 ex2.py
-----------------------------------------------------------------------------------------------------------------------------------------
PEMDAS isnt as simple as the acronym suggests its actually better represented
as PE (M&D) (A&S) so Parenthesis, exponents THEN Multiplication and division
happen at the same time andaddition and subtraction happen at the same time
after that.
-----------------------------------------------------------------------------------------------------------------------------------------
Variables are easily declared in python just variable name = something
-----------------------------------------------------------------------------------------------------------------------------------------
f is a formatting character and is used to reference variables inside strings
for example print(f"My age is {my_age}.") pretty simple but keep in mind that in
a print statement the f goes INSIDE the Parenthesis but outside the quotations
-----------------------------------------------------------------------------------------------------------------------------------------
You can use f in variables like so: var1 = f"Its the same {var}" REMEMBER that
-----------------------------------------------------------------------------------------------------------------------------------------
You can also use stat a string with a {} in a variable and then you can change
it later. For example x = "No f yet but we will leave some {} here"
print(x.format(brackets))
You only need one variable and the print function. I assume there are other ways
to do this without the print function though. Its very interesting REMEMBER THIS
-----------------------------------------------------------------------------------------------------------------------------------------
You can use the + to concatenate strings and variables as well
-----------------------------------------------------------------------------------------------------------------------------------------
# the .format('snow')) can be used to change the values within the curly brackets
#but if there are multiple brackets how do you differentiate them from each other?? It goes first 
come first serve like so:
print(x.format(first, second, third))
#The reason this is important is that it can be used in loops or other situations
 where a string is already defined? 
-----------------------------------------------------------------------------------------------------------------------------------------
f is the same as .format(). For example
print("Its fleece was white as {}".format('snow'))
The above code is the same as:
print(f"Its fleece was white as {snow}")
-----------------------------------------------------------------------------------------------------------------------------------------
print("a" * 10) This will print the character a 10 times interesting that you can
do math on strings.
-----------------------------------------------------------------------------------------------------------------------------------------
,end="" allows you to print on the same line. If you use: + " " it will perform
a line break which may not be the desired result.
So Remember , end=" " means no line break where + will add a line break
-----------------------------------------------------------------------------------------------------------------------------------------
placeholdervar = {}{}{}{}{}{}{}{}

print(placeholdervar.format('1','2','3','4','5','6','7','8'))

-----------------------------------------------------------------------------------------------------------------------------------------
\ is the escape character good for escaping out of quotes and getting around
special characters
-----------------------------------------------------------------------------------------------------------------------------------------
"""This is a multi line string
As long as it starts and ends with
 \"\"\" characters. It will continue
forever"""
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR: I used a /n instead of a \n DONT DO THAT!
-----------------------------------------------------------------------------------------------------------------------------------------
There are a good amount of escape character combinatations
WHY use these?
\t tabs
\n as mentioned goes to a new line
\r does a carriage return which is like a new line except in some situations
its a little different
\ combined with a special char will exclude a special characters like ' or "
There are also \ combinations that allow different formatting
-----------------------------------------------------------------------------------------------------------------------------------------

 end=' ' What is it again?
            First: its used only with the print command
            Second: The print command will always go to a new line
            But if you dont want the output to go on a NEW line but stay on the SAME line
            you should use end = ' '
            This tells Python to end the string with a space instead
            Thats really all there is to it.
REMEMBER^
-----------------------------------------------------------------------------------------------------------------------------------------
REMEMBER: User input is easy just assign a variable like so:
usrinput = input()
To make this easier lets put the prompt as a question to save us a print() cmd
whatisyourage = input("Enter your age.")
-----------------------------------------------------------------------------------------------------------------------------------------
You can put the prompt inside the input like so: var = input("Enter your name:")
-----------------------------------------------------------------------------------------------------------------------------------------
pydoc! its like the man pages for commands,keywords and anything in python!
REMEMBER IT
-----------------------------------------------------------------------------------------------------------------------------------------
pydoc file will open a file and write or append to it!
-----------------------------------------------------------------------------------------------------------------------------------------
pydoc sys This will allow you to change path names, stdin and stuff like that?
IDK what I DO know is that sys will allow you to import more code that is built
in to python.
-----------------------------------------------------------------------------------------------------------------------------------------
pydoc os

-----------------------------------------------------------------------------------------------------------------------------------------
Argv - you import this MODULE with sys like so from sys argv you can then assign it
arguments that you will have to provide it to run the python script. So when
typing in the command python3.6 you need to specify what the script for one then
the following variables that will be sent to argv. When the script is ran it
unpacks argv and will send your code those variables on request.
-----------------------------------------------------------------------------------------------------------------------------------------
You can import modules to Python this is to reduce the overhead if it was already
usable by python and just not used. Modules are often called libraries.
-----------------------------------------------------------------------------------------------------------------------------------------
from sys import argv
ageinput = input("What is your age? ")
heightinput = input("What is your height? ")
weightinput = input("What is your wieght? ")

script, averageage, averageheight, averageweight = argv
#In the future we can add some conditional statements to compare the average to
the user input and print other things below!!!
print(f"The average age is {averageage} but your age is {ageinput}.")
print(f"The average height is {averageheight} but your height is {heightinput}.")
print(f"The average weight is {averageweight} but your weight is {weightinput}.")

The above code that I wrote is a good example of using both the argv and inputs
together to provide a cool mix of code. REMEMBER that the variables supplied to
argv are just normal variables and can be referenced with {}. You can even make
conditional statements after to say your under the average age your young or
over the average your old!
-----------------------------------------------------------------------------------------------------------------------------------------
IDEAS FOR YOUR OWN CODE! make a loading bar! [#################.................]
Do this in your journal application that you will write
-----------------------------------------------------------------------------------------------------------------------------------------
This goes without saying but you can use f inside a 3 qoute string like so: f"""
 Some words {text} """ obviously
-----------------------------------------------------------------------------------------------------------------------------------------
f is not just for print you can use it with input too!!!
prompt=">"
firstnumber = input(f"Enter the first number{prompt}")
-----------------------------------------------------------------------------------------------------------------------------------------
verysimplecalc.py
eval will calculate the value of strings that are actually numbers and operators
like so: eval(f'{firstnumber} {operator} {secondnumber}')
eval is very useful as you dont have to convert the strings to integers before making calculations
When using argv for calculations with eval remember that input considers the *(multiplication)
a special character so you will need to use \* to exclude it.
-----------------------------------------------------------------------------------------------------------------------------------------
ex15.py
Open and read can be used to open the contents of a file in python and then read
can be used to see the contents of said file. READ IS AN ATTRIBUTE
-----------------------------------------------------------------------------------------------------------------------------------------
OPEN: CREATES A FILE OBJECT.
so open will open a file but it will not return anything on its own.  Ex:
var = open(filename)
Open can be ran with modes of operation which are r, w and a
r is read, w is write and a is append, the default is read
BUT AGAIN this wont do anything on its own just prep the file.
To test this I did var = open(filename, r)
Then print(var)
and it just gave out this output: <_io.TextIOWrapper name='ex15_sample.txt'
mode='r' encoding='UTF-8'>
basically showing that it has been opened and the type of encoding and mode but
doesnt do anything else.
-----------------------------------------------------------------------------------------------------------------------------------------
OPEN has multiple modes:
    'r' : use for reading
    'w' : use for writing
    'x' : use for creating and writing to a new file
    'a' : use for appending to a file
    'r+' : use for reading and writing to the same file
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR:EX15 filename.close() AttributeError: 'str' object has no attribute 'close'
That is because that is the WRONG variable it wasnt opened pay attention to the
variable names.
-----------------------------------------------------------------------------------------------------------------------------------------
There are many attributes to a string object that you can manipulate these are:
• close – Closes the file. Like File->Save.. in your editor.
• read – Reads the contents of the file. You can assign the result to a variable.
• readline – Reads just one line of a text file.
• truncate – Empties the file. Watch out if you care about the file.
• write('stuff') – Writes ”stuff” to the file.
• seek(0) – Move the read/write location to the beginning of the file.
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR: EX16 write takes only 1 argument SO my theory that it will overwrite
itself is wrong and that is ok its good to ask questions it helps to master code
target.write(line1,line2,line3)
TypeError: write() takes exactly one argument (3 given)
-----------------------------------------------------------------------------------------------------------------------------------------
Pause a script by placing an input("CONTINUE?") in the code this is not obviously a good idea for 
code that needs to run unattended but its very good for ensuring that a code is ran with permission
from a user.
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR EX16 Indentation Error: unexpected indent
I guess spacing is an important concept in python
but usually only at the beginning of the lines. EX:
 target.write(line1)
 target.write("\n")
 target.write(line2)
 target.write("\n")
 target.write(line3)
 target.write("\n")
-----------------------------------------------------------------------------------------------------------------------------------------
Even though write takes ONE argument
You can use + to get around that!
DONT use commas or you will get the error above!
-----------------------------------------------------------------------------------------------------------------------------------------
will the f parameter work with write? It does yes! and it makes it a bit easier
as you dont have to put the +'s and the "" around every \n
target.write(f"{line1} \n {line2} \n {line3} \n")
-----------------------------------------------------------------------------------------------------------------------------------------
At this point we can PRINT and we can read and write to files, pretty good really!!! KEEP UP THE GOOD
WORK!!!!
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR EX 17: NameError: name 'PRINT' is not defined
I wanted to see if python was case sensitive, looks like that is a YES
-----------------------------------------------------------------------------------------------------------------------------------------
You can run functions in print(f"") to do so include them in {} as well
ex: print(f"Does the file exist? {exists(file)}")
-----------------------------------------------------------------------------------------------------------------------------------------
REMEMBER input() is a good way to pause a file from executing just press ENTER
to continue with the script. Pretty handy for pausing python until there is user interaction
-----------------------------------------------------------------------------------------------------------------------------------------
ACTIVITY Have python run a script creating file objects from log files and searching for errors 
in those in a live stream!!! 
-----------------------------------------------------------------------------------------------------------------------------------------
the len function will calculate the length of a file in storage. It works with
string variables as well len(stringvar) will count the characters in the string
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR:EX17.1 When combining open and read in one variable like so:
variable = open(othervar).read()
you CANNOT then perform variable.close() it will fail
I am unsure as to why and I dont even know how to check so I will have to return
to this later to discover.
-----------------------------------------------------------------------------------------------------------------------------------------
Python separates multiple code lines by spacing but you can also use ; to
separate code lines cd ../
-----------------------------------------------------------------------------------------------------------------------------------------
FUNCTIONS:
IMPORTANT NOTES: User defined Functions have specific rules. They are listed here
1.Must begin with def
2.Function names can only be characters and _'s no other characters NONE OF
THESE !@#$%^&*()-=+;:'",<.>/?[{]}\|
3.Parenthesis go after the name
4.Put arguments in the parenthesis, separate them by commas
5.Arguments have to have unique names
6.The parenthesis end with a :
7.Indent all things the function will do with 4 characters or 1 single TAB
8.DEINDENT at the end

IMPORTANT NOTES: RULES REGARDING CALLING USER DEFINED FUNCTIONS
1.You can run user functions by mentioning their name
2.Just use () after the name with arguments in those ()s separated by commas
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR: EX18  print_two("Zed,"Shaw")
                       ^
SyntaxError: invalid syntax

If you look I forgot to close the first argument in a quote
-----------------------------------------------------------------------------------------------------------------------------------------
Function arguments are LOCAL only if you call the function and assign arg1 with Hello
and arg2 with There and then you call the function it will show Hello There
BUT if after the function call you attempt to print the value of arg1 it will
show as undefined
-----------------------------------------------------------------------------------------------------------------------------------------
ex18.py
Can you declare a variable with the same name? Not really
x=3
x=4
print(f"The value of {x} is: ")
In the above code the first x=3 statement will declare the varibale x
the second will overwrite the value of x to 4 it does not make a new variable
called x.
-----------------------------------------------------------------------------------------------------------------------------------------
REVIEW: ex18.py
The below code is confusing seems straight forward but the way Zed described it
made it sound more complicated. He said:
The problem with print_two is that it’s
not the easiest way to make a function. In Python we can skip the whole unpacking
arguments and just use the names we want right inside () .

So what I gather from this is that using *args is essentially asking python to
unpack ALL in the variable args and use it as the parameters for this function

But why is that more difficult? Still not answered but it has something to do
with potential args?

def print_two(*args):
    arg1, arg2 = args
    print(f"arg1: {arg1}, arg2: {arg2}")
-----------------------------------------------------------------------------------------------------------------------------------------
REVIEW ex 19.1.py
I get syntax errors when attempt to feed a function an integer which I thought
was strange:
In other words this works:
calculator("90","/","2")
BUT this DOES NOT:
calculator(100,-,6)
I do not know why....
I DO know why its because the function calculator that you made uses eval which takes STRINGS and 
performs math on those strings. If you rewrote the function do handle ints by converting user input
to strings like so: 
number1=int(input("Enter the first integer"))
Still had to use eval though as operators need a dictionary to get around that
dictionary is a key and a value pair like an associative array in javascript. 
SO its a bit advance but not THAT hard, however I will wait till we get there in futher activities.
-----------------------------------------------------------------------------------------------------------------------------------------
** is the operator for exponents
-----------------------------------------------------------------------------------------------------------------------------------------
ex19.1.py When using inputs they appear as they are in the code. Some coding
languages execute those first but not python which is cool.
-----------------------------------------------------------------------------------------------------------------------------------------
You can supply the function with script variables and they do not have to have
the same name as the arguments. But of course they can if you want.
-----------------------------------------------------------------------------------------------------------------------------------------
REMEMBER: EX19.py
Does making the variable amount_of_cheese change the variable cheese_count in the function? No,
those variables are separate and live outside the function. They are then passed to the function,
and temporary versions are made just for the function’s run. When the function exits these tem-
porary variables go away and everything keeps working. Keep going in the book, and this should
become clearer.
-----------------------------------------------------------------------------------------------------------------------------------------
A variable can reference itself to increase its own value
x = x + 1
To save writign you can do +=
x += 1
Keep your mind open: you can do this with other variables too of course
x += y
-----------------------------------------------------------------------------------------------------------------------------------------
EX20.py if we print the entire file then print each line by line WITHOUT rewinding it does the
line by line print nothing as its the EOF(end of file)? Or does it automatically rewind and
the rewind in ex20 unnecessary? REWIND IS NECESSARY otherwise blank values will be given
as I suspected
-----------------------------------------------------------------------------------------------------------------------------------------
REMEMBER:
A file in Python is kind of like an old tape drive on
a mainframe or maybe a DVD player. It has a ”read head,” and you can ”seek” this read head
around the file to positions, then work with it there. Each time you do f.seek(0) you’re moving
to the start of the file. Each time you do f.readline() you’re reading a line from the file and
moving the read head to right after the \n that ends that line. This will be explained more as you
go on.
-----------------------------------------------------------------------------------------------------------------------------------------
REMEMBER: seek(0) DOES NOT MEAN the first line but rather the first byte keep that in mind
-----------------------------------------------------------------------------------------------------------------------------------------
When using readline() the file keeps track of what line is being read. Readline will look
for a \n or a break and gatther that \n then stop and that is how it knows when to return
the output
-----------------------------------------------------------------------------------------------------------------------------------------
EX21.py You can of course have function use their return value to supply the argument
to another function:what = add(age, subtract(height, multiply(weight,divide(iq,2))))
As long as they have more than one argument you can daisy chain them like this
-----------------------------------------------------------------------------------------------------------------------------------------
REMEMBER: you can declare variables in a print statement by using ,'s or by using +
the ,'s will print on the same line where the + sign will make it appear on a new line
example with commas: print("That becomes: ", what, "Can you do it by hand?")
-----------------------------------------------------------------------------------------------------------------------------------------
Why does Python print the formula or the functions ”backward”? Its simple. In excercise 20
all of the functions have both a and b parameters. For parameter a we provide the function
with the variable age. But for the b value we substitute if for another function. We do this
multiple times, linking all of the functions together. Python then goes and says I know the
value of parameter a its age. but the value of b is all of these other functions and it begins
calculateing those based on their innermost parenthesis which is why it works inside
out. Each inner parenthesis must be resolved before it can calculate final value of b.
-----------------------------------------------------------------------------------------------------------------------------------------
There are other ways of importing packages:
you can do:
from sys import argv
OR you can do:
import sys
script, input_encoding, error = sys.argv
-----------------------------------------------------------------------------------------------------------------------------------------
Inside a function you can daisy chain another function of course as we did before you can even feed
the inside function the same variables as the outside function
def main(language_file, encoding, errors):
    line = language_file.readline()
# if line exists?
    if line:
        print_line(line, encoding, errors)
        return main(language_file, encoding, errors)
-----------------------------------------------------------------------------------------------------------------------------------------
if statements begin with if then follow the condition then a : to begin the then statement.
Then indent 4 spaces in manually or with tab and state what will hapen if true.
-----------------------------------------------------------------------------------------------------------------------------------------
.strip() - removes spaces and linebreaks at the end of strings
-----------------------------------------------------------------------------------------------------------------------------------------
.encode - Encodes to UTF-8 UTF-16 and others like UTF-32 which are computer langs
-----------------------------------------------------------------------------------------------------------------------------------------
.decode - decodes bytes back to strings or in other words computer readable to human readable
-----------------------------------------------------------------------------------------------------------------------------------------
For ex23.py had to enable utf-8 for all languages on my terminal by running:
sudo dpkg-reconfigure locales
and selecting all.
Then re-download the language file as it affected the entire computer not just the terminal
-----------------------------------------------------------------------------------------------------------------------------------------
”DBES” which stands for ”Decode Bytes Encode Strings”. I say ”dee bess” in my head when I have to
convert bytes and strings. When you have bytes and need a string , ”Decode Bytes”. When you have
a string and need bytes , ”Encode Strings”
-----------------------------------------------------------------------------------------------------------------------------------------
 In if statements you can do if something: and that will check and see if its not null.
-----------------------------------------------------------------------------------------------------------------------------------------
# Without a conventional loop this will loop until the line is null and that is kind of amazing
# I didnt even notice this before but the function main keeps calling itself
# making a loop without a conventional loop
def main(language_file, encoding, errors):
    line = language_file.readline()
# if line exists? YES
    if line:
        print_line(line, encoding, errors)
        #calls itself
        return main(language_file, encoding, errors)
-----------------------------------------------------------------------------------------------------------------------------------------
REVIEW: errors strict?? Is this some sort of built in error checking?
-----------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------
MISUNDERSTOOD: When using print(f"") its only neccessary when you want to combine strings WITH variables.
You can just do print(var) with no quotes and no f if you just want the var to print.(Tested this)
-----------------------------------------------------------------------------------------------------------------------------------------
ERROR EX24.PY:
File "ex24.py", line 23
    def secret_formula(started)
                              ^
SyntaxError: invalid syntax
FORGOT TO ADD A : after the ()'s for the function
-----------------------------------------------------------------------------------------------------------------------------------------
=========================================================================================================
REVIEW
=========================================================================================================
After quite some time without using python I decided to review what I have learned so far. Much I have forgotten but only temporarily as
I have simply archived the knowledge and need to refreshen it and not learn it all anew. However i have decided to run each .py script 
and also run each section of it to ensure I understand it. 

I picked up some things I must have missed the first time and am noting them here in this review section:

The < and > signs will automatically change the returned value to a boolean on their own which I found interesting and probably must be 
true in other coding languages as well 

EX:
print("How intriguing that it makes the returned values a boolean automatically when running a < or > operation like 3+2<5-7. The 
answer of course is",3+2<5-7,".The less sign must change the statement automatically within phython to a boolean return value") 
---------------------------------------------------------------------------------------------------------
REMEMBER: when calling functions with arguments you can perform math and even call variables for the
arguments

---------------------------------------------------------------------------------------------------------
REMEMBER: Arguments are place holders nothing more.
The function below has 2 arguments but when you call the function the names of the supplied arguments canbe direct input or variables with different or the same name as the argument itself. For example:

def areaofsq(variable1,variable2):
    print(f"The area of the square is equal to: ", variable1*variable2)

height=10
width=10
areaofsq(height,width)

areaofsq(10,10)

areaofsq(height-2,width-1)


The above code all works!

=========================================================================================================
END REVIEW
=========================================================================================================
THINKOUTSIDETHEBOX

In the below snippet of code which is found in excercise 24 you see that
 you can declare multiple variables at once using a function on the other
 end like so
 beans, jars, crates = secret_formula(start_point) # declares 3 variables
 and assigns them the function result
-----------------------------------------------------------------------------------------------------
Also in ex24.py is the ability to assign multiple brackets values by 
assigning the return of the secret_formula function to a variable and then
leaving blank brackets in a print statement and filling them in with .format 
the use of an * to assign multiple values is quite clever
formula = secret_formula(start_point)
print("We'd have {} beans, {} jars, and {} crates.".format(*formula))
-----------------------------------------------------------------------------------------------------
ERROR: EX25.py 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/foss-ter/MYSELF/Python/Exercise/25/ex25.py", line 4, in break_words
    words=stuff.split('')
ValueError: empty separator

CAUSE: Forgot to add a delimiter
RESOLUTION: When using .split('') dont leave it empty put a delimiter in there like so:
.split(' ')
-----------------------------------------------------------------------------------------------------
 didnt know that you can import .py files when doing so first open the python cli by typing 
python3.6 and pressing enter
Then use import filename WITHOUT the .py to import variables, functions and whatever else ya 
have in that file. 
When referencing commands simply prefix the filename like so ex25.myfunction
-----------------------------------------------------------------------------------------------------
So in EX25 we just made a local module without even knowing about it! That is ridiculous!
Well that is really cool and just like with most modules you can run help (modulename) or in this
case help (ex25) and it will print out the comments you made in the code above each function!

When creating the module python will create a dir called _pythoncache_ which I do not know what it does
as of yet save that I know it gets created at the moment the local module is loaded into python.

My guess is that once that is created we can run the code that we ran in the excercise to execute those
functions in the dir where pythoncache is stored and it will check there for the functions wihtout having
to specify ex.function name. 

I decided to test this and it failed if I took out the ex25 in front of the functions. BUT I tried 
with the ex25 in front and I left out the import and it failed AGAIN

THEN I added the import and it all worked. SOOOOOOOO
long story short you can tun functions from another python script if you import the other script via
import. But why would you do this????

Simple you can divide your functions, methods, conditional statments up for cleaner looking code
Now is it wise for time complexity? Idk it may be an issue, especially with the scale of large
companies. 

How can you avoid specifying the ex25 each time that you reference ex25? 
change the import statement to from ex25.py import * 
-----------------------------------------------------------------------------------------------------
Other insights and notes on ex25 is the split, sorted and pop attributes or functions (whatever they 
are) 
split will split a string based on some sore of delimiter
sort will sort a string alphabetically and most likely has the ability to sort numbers as well
pop will remove a word from a list of strings. It may be able to remove numbers as well. 
RESEARCH: Should pydoc this most likely.
-----------------------------------------------------------------------------------------------------
QUESTION
What is the difference in a method, function and attribute anyway?
-----------------------------------------------------------------------------------------------------
pydoc -b will generate a list of installed modules and their help pages which is really cool so keep
that in mind as a resource for ya.
-----------------------------------------------------------------------------------------------------
When fixing excercise 26 I am proud to say I only had 1 syntax error and 1 logical error the f in a 
print statement. And I fixed them all in like 20 minutes, SO I am kind of a big deal now :P
-----------------------------------------------------------------------------------------------------
So booleans are the same and excercise 27 and 28 were pretty painful as it was some PRETTY basic 
sh*t you dont even need to be able to code to understand these concepts but having some coding 
background with java this was a VERY painful excercise but being the completionist that I am I sort
of completed 28 but I did skip 27 as its a waste of time and energy.... moving on!
-----------------------------------------------------------------------------------------------------
SO just like functions, if statements in python are have colon and all things within the if statment
(except the declaraiton) is indented and the indention determines what is in the then statement.
if 1 != 0: #This is the declaration
	print("I tabbed here!")
var=print("if statement is over")
----------------------------------------------------------------------------------------------------
Its getting a bit tedious at this point (ex30) so from now on I will be skippping excercise and doing
only those that have a point to them and not just repeated information. 

I will be annoting new things that I come across here instead of doing the entire excercise to save
time.

EX30
The Else if statement:
elif variable < variable
	print("Someting")

The Else statement
else:
print(something) 

EX31
Nested if statements
if somevar == somevar
	print()
	if somevar == somevar
		print()

The nested if is just indented more and so is its "then" statement which is actually an indention of
its own.

I did EX32 as my loop game could use some work
LOOPS and a bit of arrays

varname = [1,2,3,4,5,6,7] 
# thats all there is to an array really add some qoutes if you want strings
----------------------------------------------------------------------------------------------------
I was wrong about lists they are actually called lists and there are arrays as well. So what is the 
difference between them? 
----------------------------------------------------------------------------------------------------







